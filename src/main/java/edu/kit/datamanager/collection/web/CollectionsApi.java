/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.7-SNAPSHOT).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package edu.kit.datamanager.collection.web;

import edu.kit.datamanager.collection.domain.CollectionCapabilities;
import edu.kit.datamanager.collection.domain.CollectionObject;
import edu.kit.datamanager.collection.domain.CollectionResultSet;
import edu.kit.datamanager.collection.domain.MemberItem;
import edu.kit.datamanager.collection.domain.MemberResultSet;
import edu.kit.datamanager.collection.domain.d3.DataWrapper;
import io.swagger.annotations.*;
import java.time.Instant;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import javax.validation.Valid;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.web.util.UriComponentsBuilder;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-07-09T15:21:24.632+02:00")
public interface CollectionsApi{

  @ApiOperation(value = "Get a list of all collections provided by this service. A successful request returns an HTTP 200 response code with a CollectionResultSet object in the response body.", nickname = "collectionsGet", notes = "This request returns a list of the collections provided by this service.  This may be a complete list, or if the service features include support for pagination, the cursors in the response may be used to iterate backwards and forwards through pages of partial results. Query parameters may be used to supply filtering criteria for the response. When combining filters of different types, the boolean AND will be used. When combining multiple instances of filters of the same type, the boolean OR will be used.", response = CollectionResultSet.class)
  @ApiResponses(value = {
    @ApiResponse(code = 200, message = "A resultset containing a list of collection objects.", response = CollectionResultSet.class),
    @ApiResponse(code = 400, message = "Invalid Input. The query was malformed.", response = Error.class)})
  @RequestMapping(value = "/collections",
          produces = {"application/json"},
          method = RequestMethod.GET)
  @ApiImplicitParams(value = {
    @ApiImplicitParam(name = "page", dataType = "integer", paramType = "query", value = "Results page you want to retrieve (0..N)"),
    @ApiImplicitParam(name = "size", dataType = "integer", paramType = "query", value = "Number of records per page."),
    @ApiImplicitParam(name = "sort", allowMultiple = true, dataType = "string", paramType = "query", value = "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.")
  })
  ResponseEntity<CollectionResultSet> collectionsGet(
          @ApiParam(value = "Filter response by the modelType property of the collection.") @Valid @RequestParam(value = "f_modelType", required = false) String fModelType,
          @ApiParam(value = "Filter response by the data type of contained collection member. A collection will meet this requirement if any of its members are of the requested type.") @Valid @RequestParam(value = "f_memberType", required = false) String fMemberType,
          @ApiParam(value = "Filter response by the ownership property of the collection") @Valid @RequestParam(value = "f_ownership", required = false) String fOwnership,
          final Pageable pgbl,
          final HttpServletRequest request,
          final UriComponentsBuilder uriBuilder);

  @ApiOperation(value = "Get a list of all collections provided by this service. A successful request returns an HTTP 200 response code with a CollectionResultSet object in the response body.", nickname = "collectionsGetD3", notes = "This request returns a list of the collections provided by this service.  This may be a complete list, or if the service features include support for pagination, the cursors in the response may be used to iterate backwards and forwards through pages of partial results. Query parameters may be used to supply filtering criteria for the response. When combining filters of different types, the boolean AND will be used. When combining multiple instances of filters of the same type, the boolean OR will be used.", response = CollectionResultSet.class)
  @ApiResponses(value = {
    @ApiResponse(code = 200, message = "A resultset containing a list of collection objects.", response = CollectionResultSet.class),
    @ApiResponse(code = 400, message = "Invalid Input. The query was malformed.", response = Error.class)})
  @RequestMapping(value = "/collections",
          produces = {"application/vnd.datamanager.d3+json"},
          method = RequestMethod.GET)
  ResponseEntity<DataWrapper> collectionsGetD3(
          final HttpServletRequest request,
          final UriComponentsBuilder uriBuilder);

  @ApiOperation(value = "Get the capabilities of this collection. A successful request returns an HTTP 200 response code with a CollectionCapabilities object in the response body.", nickname = "collectionsIdCapabilitiesGet", notes = "This request returns the capabilities metadata for the collection identified by the supplied id. The collection capabilities describe the actions and operations that are available for this collection.", response = CollectionCapabilities.class)
  @ApiResponses(value = {
    @ApiResponse(code = 200, message = "The collection capabilities metadata.", response = CollectionCapabilities.class),
    @ApiResponse(code = 401, message = "Unauthorized. Request was not authorized.", response = Error.class),
    @ApiResponse(code = 404, message = "The collection identified was not found", response = Error.class)})
  @RequestMapping(value = "/collections/{id}/capabilities",
          produces = {"application/json"},
          method = RequestMethod.GET)
  ResponseEntity<CollectionCapabilities> collectionsIdCapabilitiesGet(@ApiParam(value = "Identifier for the collection", required = true) @PathVariable("id") String id);

  @ApiOperation(value = "Delete a collection. A successful request returns an HTTP 200 response code with an  empty response body.", nickname = "collectionsIdDelete", notes = "This request deletes the collection idenified by the provided id from the collection store. The response may differ depending upon whether or not the service features include support for synchronous actions.", authorizations = {
    @Authorization(value = "oauth", scopes = {
      @AuthorizationScope(scope = "write", description = "Can write collections")
    })
  })
  @ApiResponses(value = {
    @ApiResponse(code = 200, message = "Successful deletion. Empty response body."),
    @ApiResponse(code = 202, message = "Accepted deletion request. Empty response body. (For asynchronous requests if supported by service features.)"),
    @ApiResponse(code = 401, message = "Unauthorized. Request was not authorized.", response = Error.class),
    @ApiResponse(code = 404, message = "The collection identified for deletion was not found", response = Error.class)})
  @RequestMapping(value = "/collections/{id}",
          produces = {"application/json"},
          method = RequestMethod.DELETE)
  ResponseEntity<Void> collectionsIdDelete(@ApiParam(value = "identifier for the collection", required = true) @PathVariable("id") String id);

  @ApiOperation(value = "Get the properties of a specific collection. A successful request returns an HTTP 200 response code with the requested CollectionObject in the response body.", nickname = "collectionsIdGet", notes = "This request returns the Collection Object Properties for the collection identified by the provided id.", response = CollectionObject.class)
  @ApiResponses(value = {
    @ApiResponse(code = 200, message = "The requested collection", response = CollectionObject.class),
    @ApiResponse(code = 401, message = "Unauthorized. Request was not authorized.", response = Error.class),
    @ApiResponse(code = 404, message = "The requested collection was not found", response = Error.class)})
  @RequestMapping(value = "/collections/{id}",
          produces = {"application/json"},
          method = RequestMethod.GET)
  ResponseEntity<CollectionObject> collectionsIdGet(@ApiParam(value = "Identifier for the collection", required = true) @PathVariable("id") String id);

  @ApiOperation(value = "Get the members in a collection. A successful request returns an HTTP 200 response code with a MemberResultSet object in the response body.", nickname = "collectionsIdMembersGet", notes = "This request returns the list of members contained in a collection.  This may be a complete list, or if the service features include support for pagination, the cursors in the response may be used to iterate backwards and forwards through pages of partial results. Query parameters may be used to supply filtering criteria for the response. When combining filters of different types, the boolean AND will be used. When combining multiple instances of filters of the same type, the boolean OR will be used.", response = MemberResultSet.class)
  @ApiResponses(value = {
    @ApiResponse(code = 200, message = "A resultset containing the list of member items in the identified collection.", response = MemberResultSet.class),
    @ApiResponse(code = 400, message = "Invalid input. The filter query was malformed.", response = Error.class),
    @ApiResponse(code = 401, message = "Unauthorized. Request was not authorized.", response = Error.class),
    @ApiResponse(code = 404, message = "The collection identified was not found", response = Error.class)})
  @RequestMapping(value = "/collections/{id}/members",
          produces = {"application/json"},
          method = RequestMethod.GET)
  @ApiImplicitParams(value = {
    @ApiImplicitParam(name = "page", dataType = "integer", paramType = "query", value = "Results page you want to retrieve (0..N)"),
    @ApiImplicitParam(name = "size", dataType = "integer", paramType = "query", value = "Number of records per page."),
    @ApiImplicitParam(name = "sort", allowMultiple = true, dataType = "string", paramType = "query", value = "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.")
  })
  ResponseEntity<MemberResultSet> collectionsIdMembersGet(
          @ApiParam(value = "Identifier for the collection", required = true) @PathVariable("id") String id,
          @ApiParam(value = "Filter response to members matching the requested datatype.") @Valid @RequestParam(value = "f_datatype", required = false) String fDatatype,
          @ApiParam(value = "Filter response to members who are assigned the requested role. (Only if the collection capability supportsRoles is true).") @Valid @RequestParam(value = "f_role", required = false) String fRole,
          @ApiParam(value = "Filter response to the members assigned the requested index. (Only if the collection capability isOrdered is true).") @Valid @RequestParam(value = "f_index", required = false) Integer fIndex,
          @ApiParam(value = "Filter response to the membered added on the requestd datetime.") @Valid @RequestParam(value = "f_dateAdded", required = false) Instant fDateAdded,
          @ApiParam(value = "expand members which are collections to this depth. may not exceed maxExpansionDepth feature setting for the service.") @Valid @RequestParam(value = "expandDepth", required = false) Integer expandDepth,
          final Pageable pgbl);

  @ApiOperation(value = "Remove a collection member item. A successful request returns an HTTP 200 response code wiht an empty response body.", nickname = "collectionsIdMembersMidDelete", notes = "Removes a member item from a collection. The response may differ depending upon whether or not the  service features include support for asynchronous actions.", authorizations = {
    @Authorization(value = "oauth", scopes = {
      @AuthorizationScope(scope = "write", description = "Can write collections")
    })
  })
  @ApiResponses(value = {
    @ApiResponse(code = 200, message = "Successful removal. Empty response body."),
    @ApiResponse(code = 202, message = "Accepted request. Empty response body. (For asynchronous requests, if supported by service features.)"),
    @ApiResponse(code = 401, message = "Unauthorized. Request was not authorized.", response = Error.class),
    @ApiResponse(code = 403, message = "Forbidden. May be returned, for example, if a request was made to remove  item from a static collection."),
    @ApiResponse(code = 404, message = "Not Found", response = Error.class),
    @ApiResponse(code = 200, message = "Unexpected error", response = Error.class)})
  @RequestMapping(value = "/collections/{id}/members/{mid}",
          produces = {"application/json"},
          method = RequestMethod.DELETE)
  ResponseEntity<Void> collectionsIdMembersMidDelete(
          @ApiParam(value = "Persistent identifier for the collection", required = true) @PathVariable("id") String id,
          @ApiParam(value = "Identifier for the collection member", required = true) @PathVariable("mid") String mid);

  @ApiOperation(value = "Get the properties of a member item in a collection. A successful request returns an HTTP 200 response code with a MemberItem in the response body.", nickname = "collectionsIdMembersMidGet", notes = "This request retrieves the properties of a specific member item from a collection", response = MemberItem.class)
  @ApiResponses(value = {
    @ApiResponse(code = 200, message = "The requested member", response = MemberItem.class),
    @ApiResponse(code = 401, message = "Unauthorized. Request was not authorized.", response = Error.class),
    @ApiResponse(code = 404, message = "Not found. The requested collection or member item was not found.", response = Error.class)})
  @RequestMapping(value = "/collections/{id}/members/{mid}",
          produces = {"application/json"},
          method = RequestMethod.GET)
  ResponseEntity<MemberItem> collectionsIdMembersMidGet(
          @ApiParam(value = "Identifier for the collection", required = true) @PathVariable("id") String id,
          @ApiParam(value = "Identifier for the collection member item.", required = true) @PathVariable("mid") String mid);

  @ApiOperation(value = "Delete a named property of a member item in a collection. A successful request returns an HTTP 200 response code and empty response body.", nickname = "collectionsIdMembersMidPropertiesPropertyDelete", notes = "This request deletes a specific named property of a specific member item from a collection")
  @ApiResponses(value = {
    @ApiResponse(code = 200, message = "Successful deletion. Empty response body."),
    @ApiResponse(code = 202, message = "Accepted delete request. Empty response body. (For asyncrhonous requests, if supported by service features.)"),
    @ApiResponse(code = 401, message = "Unauthorized. Request was not authorized.", response = Error.class),
    @ApiResponse(code = 403, message = "Forbidden. May be returned, for example, if a request was made to delete a required metadata property or update a static item."),
    @ApiResponse(code = 404, message = "Not found. The requested collection or member item was not found.", response = Error.class)})
  @RequestMapping(value = "/collections/{id}/members/{mid}/properties/{property}",
          produces = {"application/json"},
          method = RequestMethod.DELETE)
  ResponseEntity<Void> collectionsIdMembersMidPropertiesPropertyDelete(
          @ApiParam(value = "Identifier for the collection", required = true) @PathVariable("id") String id,
          @ApiParam(value = "Identifier for the collection member item.", required = true) @PathVariable("mid") String mid,
          @ApiParam(value = "the name of a property to update", required = true) @PathVariable("property") String property);

  @ApiOperation(value = "Get a named property of a member item in a collection. A successful request returns an HTTP 200 response code and the requested MemberItem in the response body.", nickname = "collectionsIdMembersMidPropertiesPropertyGet", notes = "This request retrieves a specific named property of a specific member item from a collection", response = MemberItem.class)
  @ApiResponses(value = {
    @ApiResponse(code = 200, message = "The requested member", response = MemberItem.class),
    @ApiResponse(code = 401, message = "Unauthorized. Request was not authorized.", response = Error.class),
    @ApiResponse(code = 404, message = "Not found. The requested collection or member item was not found.", response = Error.class)})
  @RequestMapping(value = "/collections/{id}/members/{mid}/properties/{property}",
          produces = {"application/json"},
          method = RequestMethod.GET)
  ResponseEntity<String> collectionsIdMembersMidPropertiesPropertyGet(
          @ApiParam(value = "Identifier for the collection", required = true) @PathVariable("id") String id,
          @ApiParam(value = "Identifier for the collection member item.", required = true) @PathVariable("mid") String mid,
          @ApiParam(value = "the name of a property to retrieve (e.g. index)", required = true) @PathVariable("property") String property);

  @ApiOperation(value = "Update a named property of a member item in a collection. A successful request returns an HTTP 200 response code and the updated MemberItem in the response body.", nickname = "collectionsIdMembersMidPropertiesPropertyPut", notes = "This request updates a specific named property of a specific member item from a collection", response = MemberItem.class)
  @ApiResponses(value = {
    @ApiResponse(code = 200, message = "Successful update. The updated member item is returned in the response.", response = MemberItem.class),
    @ApiResponse(code = 202, message = "Accepted update request. Empty response body. (For asynchronous requests, if supported by service features.)"),
    @ApiResponse(code = 401, message = "Unauthorized. Request was not authorized.", response = Error.class),
    @ApiResponse(code = 403, message = "Forbidden. May be returned, for example, if a request was made to update a static item."),
    @ApiResponse(code = 404, message = "Not found. The requested collection or member item was not found.", response = Error.class)})
  @RequestMapping(value = "/collections/{id}/members/{mid}/properties/{property}",
          produces = {"application/json"},
          method = RequestMethod.PUT)
  ResponseEntity<String> collectionsIdMembersMidPropertiesPropertyPut(
          @ApiParam(value = "Identifier for the collection", required = true) @PathVariable("id") String id,
          @ApiParam(value = "Identifier for the collection member item.", required = true) @PathVariable("mid") String mid,
          @ApiParam(value = "the name of a property to update", required = true) @PathVariable("property") String property,
          @ApiParam(value = "new property value", required = true) @Valid @RequestBody String content);

  @ApiOperation(value = "Update the properties of a collection member item. A successful request returns an HTTP 200 response code with the updated CollectionItemMappingMetadata in the response body.", nickname = "collectionsIdMembersMidPut", notes = "This request updates the properties of a collection member item.  The updated CollectionItemMappingMetadata  must be supplied in the body of the request. The response may differ  depending upon whether or not the  service features include support  for asynchronous actions.", response = MemberItem.class, authorizations = {
    @Authorization(value = "oauth", scopes = {
      @AuthorizationScope(scope = "modify", description = "Can modify collections")
    })
  })
  @ApiResponses(value = {
    @ApiResponse(code = 200, message = "Successful update. The updated CollectionItemMappingMetadata is returned in the response.", response = MemberItem.class),
    @ApiResponse(code = 202, message = "Accepted update request. Empty response body. (For asynchronous requests if supported by service features.)"),
    @ApiResponse(code = 400, message = "Invalid Input", response = Error.class),
    @ApiResponse(code = 401, message = "Unauthorized. Request was not authorized.", response = Error.class),
    @ApiResponse(code = 403, message = "Forbidden. May be returned, for example, if a request was made to update an item in a static collection.", response = Error.class),
    @ApiResponse(code = 404, message = "Not found. The requested collection or member item was not found.", response = Error.class)})
  @RequestMapping(value = "/collections/{id}/members/{mid}",
          produces = {"application/json"},
          method = RequestMethod.PUT)
  ResponseEntity<MemberItem> collectionsIdMembersMidPut(
          @ApiParam(value = "Identifier for the collection", required = true) @PathVariable("id") String id,
          @ApiParam(value = "Identifier for the collection member", required = true) @PathVariable("mid") String mid,
          @ApiParam(value = "Collection item mapping metadata", required = true) @Valid @RequestBody MemberItem content);

  @ApiOperation(value = "Add one or more new member items to this collection. A successful request returns an  HTTP 201 response code with an array of the new added MemberItems in the response body.", nickname = "collectionsIdMembersPost", notes = "This request adds a new member item to a collection. If the service features include support for PID assignment to member items, then if no id is supplied for the item it  will be assigned automatically.  ", response = MemberItem.class, responseContainer = "List", authorizations = {
    @Authorization(value = "oauth", scopes = {
      @AuthorizationScope(scope = "write", description = "Can write collections")
    })
  })
  @ApiResponses(value = {
    @ApiResponse(code = 201, message = "Successful creation", response = MemberItem.class, responseContainer = "List"),
    @ApiResponse(code = 202, message = "Accepted add request. Empty response body. (For asyncrhonous requests,  if supported by the service features)."),
    @ApiResponse(code = 400, message = "Invalid Request. Indicates that member properties were incorrect or invalid in  some way, e.g. if the collection only allows items a a specific type."),
    @ApiResponse(code = 401, message = "Unauthorized. Request was not authorized.", response = Error.class),
    @ApiResponse(code = 403, message = "Forbidden. May be returned, for example, if a request was made to add an item to a static collection or if adding all elements would exceed the max. collection size."),
    @ApiResponse(code = 404, message = "Not found. The collection was not found for adding items.", response = Error.class),
    @ApiResponse(code = 409, message = "Conflict. A member item with the same ID as the one posted already exists.", response = Error.class)})
  @RequestMapping(value = "/collections/{id}/members",
          produces = {"application/json"},
          method = RequestMethod.POST)
  ResponseEntity<List<MemberItem>> collectionsIdMembersPost(
          @ApiParam(value = "Identifier for the collection", required = true) @PathVariable("id") String id,
          @ApiParam(value = "The properties of the member item to add to the collection. Id may be required.", required = true) @Valid @RequestBody List<MemberItem> content);

  @ApiOperation(value = "Find member objects in a collection which match the supplied member object. A successful request returns an HTTP 200 response code with a CollectionResultSet object in the response body.", nickname = "collectionsIdOpsFindMatchPost", notes = "This request accepts as input the complete or partial properties of a member object and returns a ResultSet containing any objects which were deemed to 'match' the supplied properties among the members of the identified collection. If the service features include support for pagination, a cursor may be supplied to iterate backwards and forwards through paged results from prior executions of this query.", response = MemberResultSet.class, authorizations = {
    @Authorization(value = "oauth", scopes = {
      @AuthorizationScope(scope = "read", description = "Can read collections")
    })
  })
  @ApiResponses(value = {
    @ApiResponse(code = 200, message = "A resulset containing the matching member items from the two collections.", response = MemberResultSet.class),
    @ApiResponse(code = 401, message = "Unauthorized. Request was not authorized.", response = Error.class),
    @ApiResponse(code = 404, message = "The collection identified was not found", response = Error.class)})
  @RequestMapping(value = "/collections/{id}/ops/findMatch",
          produces = {"application/json"},
          method = RequestMethod.POST)
  @ApiImplicitParams(value = {
    @ApiImplicitParam(name = "page", dataType = "integer", paramType = "query", value = "Results page you want to retrieve (0..N)"),
    @ApiImplicitParam(name = "size", dataType = "integer", paramType = "query", value = "Number of records per page."),
    @ApiImplicitParam(name = "sort", allowMultiple = true, dataType = "string", paramType = "query", value = "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.")
  })
  ResponseEntity<MemberResultSet> collectionsIdOpsFindMatchPost(
          @ApiParam(value = "identifier for the collection", required = true) @PathVariable("id") String id,
          @ApiParam(value = "the member item properties to use when matching", required = true) @RequestBody MemberItem memberProperties,
          final Pageable pgbl);

  @ApiOperation(value = "Flattens the collection. A successful request returns  an HTTP 200 response code with a MemberResultSet object in the response body.", nickname = "collectionsIdOpsFlattenGet", notes = "This request returns a resultset which is a flattened representation of a collection of collections into a single collection.", response = MemberResultSet.class, authorizations = {
    @Authorization(value = "oauth", scopes = {
      @AuthorizationScope(scope = "read", description = "Can read collections")
    })
  })
  @ApiResponses(value = {
    @ApiResponse(code = 200, message = "A resultset containing the union of member items from the two collections", response = MemberResultSet.class),
    @ApiResponse(code = 401, message = "Unauthorized. Request was not authorized.", response = Error.class),
    @ApiResponse(code = 404, message = "One or both of the requested collections was not found.", response = Error.class)})
  @RequestMapping(value = "/collections/{id}/ops/flatten",
          produces = {"application/json"},
          method = RequestMethod.GET)
  @ApiImplicitParams(value = {
    @ApiImplicitParam(name = "page", dataType = "integer", paramType = "query", value = "Results page you want to retrieve (0..N)"),
    @ApiImplicitParam(name = "size", dataType = "integer", paramType = "query", value = "Number of records per page."),
    @ApiImplicitParam(name = "sort", allowMultiple = true, dataType = "string", paramType = "query", value = "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.")
  })
  ResponseEntity<MemberResultSet> collectionsIdOpsFlattenGet(
          @ApiParam(value = "Identifier for the collection to be flattened", required = true) @PathVariable("id") String id,
          final Pageable pgbl);

  @ApiOperation(value = "Retrieve the members at the intersection of two collections. A successful request returns  an HTTP 200 response code with a CollectionResultSet object in the response body.", nickname = "collectionsIdOpsIntersectionOtherIdGet", notes = "This request returns a resultset containing the members at the intersection of two collections. If the service features include support for pagination, a cursor may be supplied to iterate backwards and forwards through paged results from prior executions of this query. The response may be an empty set.", response = MemberResultSet.class, authorizations = {
    @Authorization(value = "oauth", scopes = {
      @AuthorizationScope(scope = "read", description = "Can read collections")
    })
  })
  @ApiResponses(value = {
    @ApiResponse(code = 200, message = "A resultset containing the intersection of member items from the two collections.", response = MemberResultSet.class),
    @ApiResponse(code = 401, message = "Unauthorized. Request was not authorized.", response = Error.class),
    @ApiResponse(code = 404, message = "One or both of the requested collections was not found.", response = Error.class)})
  @RequestMapping(value = "/collections/{id}/ops/intersection/{otherId}",
          produces = {"application/json"},
          method = RequestMethod.GET)
  @ApiImplicitParams(value = {
    @ApiImplicitParam(name = "page", dataType = "integer", paramType = "query", value = "Results page you want to retrieve (0..N)"),
    @ApiImplicitParam(name = "size", dataType = "integer", paramType = "query", value = "Number of records per page."),
    @ApiImplicitParam(name = "sort", allowMultiple = true, dataType = "string", paramType = "query", value = "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.")
  })
  ResponseEntity<MemberResultSet> collectionsIdOpsIntersectionOtherIdGet(
          @ApiParam(value = "Identifier for the first collection in the operation", required = true) @PathVariable("id") String id,
          @ApiParam(value = "Identifier for the second collection in the operation", required = true) @PathVariable("otherId") String otherId,
          final Pageable pgbl);

  @ApiOperation(value = "Retrieve the union of two collections. A successful request returns  an HTTP 200 response code with a CollectionResultSet object in the response body.", nickname = "collectionsIdOpsUnionOtherIdGet", notes = "This request returns a resultset containing the members at the union of two collections. If the service features include support for pagination, a cursor may be supplied to iterate backwards and forwards through paged results from prior executions of this query. The response may be an empty set.", response = MemberResultSet.class, authorizations = {
    @Authorization(value = "oauth", scopes = {
      @AuthorizationScope(scope = "read", description = "Can read collections")
    })
  })
  @ApiResponses(value = {
    @ApiResponse(code = 200, message = "A resultset containing the union of member items from the two collections", response = MemberResultSet.class),
    @ApiResponse(code = 401, message = "Unauthorized. Request was not authorized.", response = Error.class),
    @ApiResponse(code = 404, message = "One or both of the requested collections was not found.", response = Error.class)})
  @RequestMapping(value = "/collections/{id}/ops/union/{otherId}",
          produces = {"application/json"},
          method = RequestMethod.GET)
  @ApiImplicitParams(value = {
    @ApiImplicitParam(name = "page", dataType = "integer", paramType = "query", value = "Results page you want to retrieve (0..N)"),
    @ApiImplicitParam(name = "size", dataType = "integer", paramType = "query", value = "Number of records per page."),
    @ApiImplicitParam(name = "sort", allowMultiple = true, dataType = "string", paramType = "query", value = "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.")
  })
  ResponseEntity<MemberResultSet> collectionsIdOpsUnionOtherIdGet(
          @ApiParam(value = "Identifier for the first collection in the operation", required = true) @PathVariable("id") String id,
          @ApiParam(value = "Identifier for the second collection in the operation", required = true) @PathVariable("otherId") String otherId,
          final Pageable pgbl);

  @ApiOperation(value = "Update the properties of a Collection Object. A successful request returns an HTTP 200 response code with the updated CollectionObject in the response body.", nickname = "collectionsIdPut", notes = "This request updates the properties of the collection identified by the provided id. The updated collection properties must be supplied in the body of the request. The response may differ depending upon whether or not the  service features include support for syncrhonous actions.", response = CollectionObject.class, authorizations = {
    @Authorization(value = "oauth", scopes = {
      @AuthorizationScope(scope = "modify", description = "Can modify collections")
    })
  })
  @ApiResponses(value = {
    @ApiResponse(code = 200, message = "Successful update, returns the updated collection.", response = CollectionObject.class),
    @ApiResponse(code = 202, message = "Accepted update request. Empty response body. (For asynchronous requests if supported by service features.)"),
    @ApiResponse(code = 400, message = "Invalid Input. The collection properties were malformed or invalid.", response = Error.class),
    @ApiResponse(code = 401, message = "Unauthorized. Request was not authorized.", response = Error.class),
    @ApiResponse(code = 403, message = "Forbidden. May be returned, for example, if a request was made to update a collection whose metadata is not mutable.", response = Error.class),
    @ApiResponse(code = 404, message = "The collection identified for update was not found", response = Error.class)})
  @RequestMapping(value = "/collections/{id}",
          produces = {"application/json"},
          method = RequestMethod.PUT)
  ResponseEntity<CollectionObject> collectionsIdPut(
          @ApiParam(value = "Persistent identifier for the collection", required = true) @PathVariable("id") String id,
          @ApiParam(value = "The properties of the collection to be updated.", required = true) @Valid @RequestBody CollectionObject content);

  @ApiOperation(value = "Create one or more new collections. Successful requests will return an HTTP 201 response code with an array of the newly created CollectionObject(s) in the response body.", nickname = "collectionsPost", notes = "This request adds one or more new collections to the collection store. The Collection Objects to be created  must be supplied in the body of the request. ", response = CollectionObject.class, responseContainer = "List", authorizations = {
    @Authorization(value = "oauth", scopes = {
      @AuthorizationScope(scope = "write", description = "Can write collections")
    })
  })
  @ApiResponses(value = {
    @ApiResponse(code = 201, message = "Successful creation", response = CollectionObject.class, responseContainer = "List"),
    @ApiResponse(code = 202, message = "Accepted create request. Empty response body. (For asyncrhonous requests,  if supported by the service features)."),
    @ApiResponse(code = 400, message = "Invalid Input. The collection properties were malformed or invalid.", response = Error.class),
    @ApiResponse(code = 401, message = "Unauthorized. Request was not authorized.", response = Error.class),
    @ApiResponse(code = 409, message = "Conflict. A collection with the same ID as the one posted already exists.", response = Error.class)})
  @RequestMapping(value = "/collections",
          produces = {"application/json"},
          method = RequestMethod.POST)
  ResponseEntity<List<CollectionObject>> collectionsPost(@ApiParam(value = "The properties of the collection.", required = true) @Valid @RequestBody List<CollectionObject> content);

}
